#!/usr/bin/env python3


from argparse import ArgumentParser, FileType, SUPPRESS
from collections import namedtuple
from datetime import datetime
from getpass import getpass
from mechanicalsoup import StatefulBrowser
import csv
import http.client
import logging
import sys




TimeEntry = namedtuple('TimeEntry', 'issue_id spent_on hours comments activity')




# TODO: What about adding a configuration file or just using a configuration
# file?
parser = ArgumentParser(
    fromfile_prefix_chars='@',
    description='Redmine Time Tracking Tool for adding time tracking entries '
        'from CSV data',
    epilog='You may pass pre-configured argument sets from a file by specifying '
        '@FILE as argument.')
parser.add_argument('csv', metavar='CSV_FILE', type=FileType('r'),
    help='CSV input file with time tracking data')
parser.add_argument('url', metavar='URL',
    help='Base URL of Redmine installation')
parser.add_argument('--user', '-u', required=True,
    help='Redmine user name')
parser.add_argument('--dry-run', '-n', action='store_true',
    help='Print time entries but don\'t add to Redmine')
parser.add_argument('--debug', action='store_true',
    help='Enable debug output')
# TODO: I did not manage to get the validation for an incomplete certificate
# chain right. Neither with the certificate itself nor the complete chain in a
# certificate file passed via a HTTPAdapter from requests.adapters. I'm giving
# up for now and add this flag for disabling certificate validation completely.
parser.add_argument('--insecure', action='store_true',
    help=SUPPRESS)
csv_group = parser.add_argument_group('csv', 'CSV data format')
csv_group.add_argument('--delimiter', '-d',
    default=',',
    help='CSV delimiter')
csv_group.add_argument('--date-format', metavar='FORMAT',
    default='%Y-%m-%d',
    help='Format string for parsing date column')
csv_group.add_argument('--skip-rows', metavar='ROWS', type=int,
    default=0,
    help='Skip first ROWS rows')
columns_group = parser.add_argument_group('columns', 'CSV columns, starting at zero')
columns_group.add_argument('--issue', metavar='N',  type=int,
    help='Column containing issue ID')
columns_group.add_argument('--date', metavar='N', type=int,
    help='Column containing date')
columns_group.add_argument('--hours', metavar='N', type=int,
    help='Column containing spent hours')
columns_group.add_argument('--comment', metavar='N', type=int,
    help='Column containting comment')
columns_group.add_argument('--activity', metavar='N', type=int,
    help='Column containing activity name')


args = parser.parse_args()


if args.debug:
    logging.getLogger("urllib3").setLevel(logging.DEBUG)

    logging.getLogger().setLevel(logging.DEBUG)
    request_logger = logging.getLogger('requests.packages.urllib3')
    request_logger.setLevel(logging.DEBUG)
    request_logger.propagate = True

    http.client.HTTPConnection.debuglevel = 1


entries = []

reader = csv.reader(args.csv, delimiter=args.delimiter)
for row in reader:
    if reader.line_num > args.skip_rows:
        try:
            issue_id = int(row[args.issue])
            date = datetime.strptime(row[args.date], args.date_format)
            # Redmine supports a whole bunch of formats for the time spent. For
            # example '1h30', '1.5', '1,5' and '1:30'. Don't limit this by
            # converting the time to a floating point number on our own.
            hours = row[args.hours]
            comment = row[args.comment]
            activity = row[args.activity]

            entry = TimeEntry(issue_id, date, hours, comment, activity)

            entries.append(entry)
        except ValueError as e:
            print('Failed to parse values from line {}: {} ({})'.format(
                reader.line_num, e, row), file=sys.stderr)
            sys.exit(1)


password = getpass(stream=sys.stderr)

browser = StatefulBrowser()
if args.debug:
    browser.set_verbose(2)

if args.insecure:
    browser.session.verify = False

browser.open(args.url + '/login')
form = browser.select_form('#login-form form')
form['username'] = args.user
form['password'] = password
# browser.get_current_form().print_summary()
response = browser.submit_selected()
# FIXME: Check response.
if args.debug:
    print('response: {}'.format(response))

for entry in entries:
    response = browser.open(args.url + '/issues/{}/time_entries/new'.format(entry.issue_id))
    # FIXME: Check response.
    if args.debug:
        print('response: {}'.format(response))
        print('current url: {}'.format(browser.get_url()))

    # I did not succeed in looking up the form via its ID '#new_time_entry'.
    form = browser.select_form('form[class=new_time_entry]')
    if args.debug:
        form.print_summary()
    form['time_entry[issue_id]'] = entry.issue_id
    # Beware: Despite my test installation with German date format is showing
    # 02.11.2019 in the browser, the actual date is sent in ISO 8601 (YYYY-MM-DD)
    # over the wire.
    form['time_entry[spent_on]'] = entry.spent_on.strftime('%Y-%m-%d')
    form['time_entry[hours]'] = entry.hours
    form['time_entry[comments]'] = entry.comments
    # TOOD: What about resolving the activity ID from the activity name?
    form['time_entry[activity_id]'] = entry.activity
    # TODO: What about submitting via 'commit' so that we could distinguish any
    # issue with data from the URL loaded afterwards? In case of an error we
    # are landing on the same page again. In case of success we will be
    # redirected back to the issue.
    form.choose_submit('commit')
    if args.dry_run:
        print('{}'.format(entry))
    else:
        response = browser.submit_selected()
        # FIXME: Check response.
        if args.debug:
            print('response: {}'.format(response))
            print('current url: {}'.format(browser.get_url()))
